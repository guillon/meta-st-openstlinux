From 6ce4b6a031b8accb67332cebd42e822fd7cbea71 Mon Sep 17 00:00:00 2001
From: Christophe Priouzeau <christophe.priouzeau@linaro.org>
Date: Wed, 6 Apr 2016 15:35:07 +0200
Subject: [PATCH 03/13] STM: subtitleoverlay: enable specific colorspace for
 subtitles

Differentiate colorspace used for subtitles from the one
used for other playback elements.
This allows, for example, to enable hardware accelerated
conversion for video decoding while keeping software
conversion for small subtitles resolution.

Change-Id: I435e794c90360072712fea0f4849267b3816e158
Signed-off-by: NITIN MAHAJAN <nitin.mahajan@st.com>
---
 gst/playback/Makefile.am          |  1 +
 gst/playback/gstsubtitleoverlay.c | 16 ++++++++--------
 2 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/gst/playback/Makefile.am b/gst/playback/Makefile.am
index 081b224..dfaffb8 100644
--- a/gst/playback/Makefile.am
+++ b/gst/playback/Makefile.am
@@ -1,6 +1,7 @@
 plugin_LTLIBRARIES = libgstplayback.la
 
 csp_cflags = -DCOLORSPACE=\"videoconvert\"
+csp_cflags += -DCOLORSPACE_SUBT=\"videoconvert\"
 
 libgstplayback_la_SOURCES = \
 	gstdecodebin2.c \
diff --git a/gst/playback/gstsubtitleoverlay.c b/gst/playback/gstsubtitleoverlay.c
index adab7e5..efadd25 100644
--- a/gst/playback/gstsubtitleoverlay.c
+++ b/gst/playback/gstsubtitleoverlay.c
@@ -843,7 +843,7 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
     if (!is_hw) {
       /* First link everything internally */
       if (G_UNLIKELY (!_create_element (self, &self->post_colorspace,
-                  COLORSPACE, NULL, "post-colorspace", FALSE))) {
+                  COLORSPACE_SUBT, NULL, "post-colorspace", FALSE))) {
         return FALSE;
       }
       src = gst_element_get_static_pad (renderer, "src");
@@ -854,13 +854,13 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
 
       sink = gst_element_get_static_pad (self->post_colorspace, "sink");
       if (G_UNLIKELY (!sink)) {
-        GST_WARNING_OBJECT (self, "Can't get sink pad from " COLORSPACE);
+        GST_WARNING_OBJECT (self, "Can't get sink pad from " COLORSPACE_SUBT);
         gst_object_unref (src);
         return FALSE;
       }
 
       if (G_UNLIKELY (gst_pad_link (src, sink) != GST_PAD_LINK_OK)) {
-        GST_WARNING_OBJECT (self, "Can't link renderer with " COLORSPACE);
+        GST_WARNING_OBJECT (self, "Can't link renderer with " COLORSPACE_SUBT);
         gst_object_unref (src);
         gst_object_unref (sink);
         return FALSE;
@@ -869,7 +869,7 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
       gst_object_unref (sink);
 
       if (G_UNLIKELY (!_create_element (self, &self->pre_colorspace,
-                  COLORSPACE, NULL, "pre-colorspace", FALSE))) {
+                  COLORSPACE_SUBT, NULL, "pre-colorspace", FALSE))) {
         return FALSE;
       }
 
@@ -881,13 +881,13 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
 
       src = gst_element_get_static_pad (self->pre_colorspace, "src");
       if (G_UNLIKELY (!src)) {
-        GST_WARNING_OBJECT (self, "Can't get srcpad from " COLORSPACE);
+        GST_WARNING_OBJECT (self, "Can't get srcpad from " COLORSPACE_SUBT);
         gst_object_unref (sink);
         return FALSE;
       }
 
       if (G_UNLIKELY (gst_pad_link (src, sink) != GST_PAD_LINK_OK)) {
-        GST_WARNING_OBJECT (self, "Can't link " COLORSPACE " to renderer");
+        GST_WARNING_OBJECT (self, "Can't link " COLORSPACE_SUBT " to renderer");
         gst_object_unref (src);
         gst_object_unref (sink);
         return FALSE;
@@ -898,7 +898,7 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
       /* Set src ghostpad target */
       src = gst_element_get_static_pad (self->post_colorspace, "src");
       if (G_UNLIKELY (!src)) {
-        GST_WARNING_OBJECT (self, "Can't get src pad from " COLORSPACE);
+        GST_WARNING_OBJECT (self, "Can't get src pad from " COLORSPACE_SUBT);
         return FALSE;
       }
     } else {
@@ -966,7 +966,7 @@ _link_renderer (GstSubtitleOverlay * self, GstElement * renderer,
   if (self->pre_colorspace) {
     sink = gst_element_get_static_pad (self->pre_colorspace, "sink");
     if (G_UNLIKELY (!sink)) {
-      GST_WARNING_OBJECT (self, "Can't get sink pad from " COLORSPACE);
+      GST_WARNING_OBJECT (self, "Can't get sink pad from " COLORSPACE_SUBT);
       return FALSE;
     }
   } else {
-- 
2.7.4

