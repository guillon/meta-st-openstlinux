From c492117da3ea4452a92ae916e2d3c98dae954a11 Mon Sep 17 00:00:00 2001
From: Christophe Priouzeau <christophe.priouzeau@st.com>
Date: Thu, 5 Jan 2017 13:58:20 +0100
Subject: [PATCH 05/15] lib4l-hva: add new plugin for hva

Add new plugin libv4l-hva to help generation of sps/pps.

Change-Id: Ib9f6594103677ec10696764414cb8bbcce10cba7
Signed-off-by: yannick Fertre <yannick.fertre@st.com>
Reviewed-on: https://gerrit.st.com/20695

# Conflicts:
#	configure.ac
#	lib/Makefile.am
---
 configure.ac                |   1 +
 lib/Makefile.am             |   5 +-
 lib/libv4l-hva/Makefile.am  |  13 ++++
 lib/libv4l-hva/libv4l-hva.c | 183 ++++++++++++++++++++++++++++++++++++++++++++
 lib/libv4l-hva/libv4l-hva.h |  30 ++++++++
 5 files changed, 230 insertions(+), 2 deletions(-)
 create mode 100644 lib/libv4l-hva/Makefile.am
 create mode 100644 lib/libv4l-hva/libv4l-hva.c
 create mode 100644 lib/libv4l-hva/libv4l-hva.h

diff --git a/configure.ac b/configure.ac
index 069913d..b8721c3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -17,6 +17,7 @@ AC_CONFIG_FILES([Makefile
 	lib/libdvbv5/Makefile
 	lib/libv4l2rds/Makefile
 	lib/libv4l-mplane/Makefile
+	lib/libv4l-hva/Makefile
 
 	utils/Makefile
 	utils/libv4l2util/Makefile
diff --git a/lib/Makefile.am b/lib/Makefile.am
index 3a0e19c..38914bb 100644
--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -3,9 +3,10 @@ SUBDIRS = \
 	libv4l2 \
 	libv4l1 \
 	libv4l2rds \
-	libv4l-mplane
+	libv4l-mplane \
+	libv4l-hva
 
 if LINUX_OS
 SUBDIRS += \
 	libdvbv5
-endif
\ No newline at end of file
+endif
diff --git a/lib/libv4l-hva/Makefile.am b/lib/libv4l-hva/Makefile.am
new file mode 100644
index 0000000..cfa2243
--- /dev/null
+++ b/lib/libv4l-hva/Makefile.am
@@ -0,0 +1,13 @@
+if WITH_V4L_PLUGINS
+libv4l2plugin_LTLIBRARIES = libv4l-hva.la
+endif
+
+libv4l_hva_la_SOURCES = libv4l-hva.c
+
+libv4l_hva_la_CPPFLAGS = $(CFLAG_VISIBILITY)
+
+libv4l_hva_la_LIBADD = ../libv4l2/libv4l2.la
+
+libv4l_hva_la_CPPFLAGS += -DHVA_DEBUG
+
+libv4l_hva_la_LDFLAGS = -avoid-version -module -shared -export-dynamic -lpthread
diff --git a/lib/libv4l-hva/libv4l-hva.c b/lib/libv4l-hva/libv4l-hva.c
new file mode 100644
index 0000000..5d2b037
--- /dev/null
+++ b/lib/libv4l-hva/libv4l-hva.c
@@ -0,0 +1,183 @@
+/*
+ * Copyright (C) 2014 STMicroelectronics SA
+ *
+ * License Terms:  GNU General Public License (GPL) version 2
+ *
+ * Author: <yannick.fertre@st.com> for STMicroelectronics.
+ */
+
+#include <config.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/syscall.h>
+#include <sys/mman.h>
+
+#include "libv4l-plugin.h"
+#include "libv4l-hva.h"
+
+#if HAVE_VISIBILITY
+#define PLUGIN_PUBLIC __attribute__ ((visibility("default")))
+#else
+#define PLUGIN_PUBLIC
+#endif
+
+#define type_to_str(type) ((type == V4L2_BUF_TYPE_VIDEO_OUTPUT) ? "OUTPUT" : \
+	((type == V4L2_BUF_TYPE_VIDEO_CAPTURE) ? "CAPTURE" : "?"))
+
+#define buf_to_str(buf) ((buf == VIDIOC_QBUF) ? "QBUF" : "DQBUF")
+
+static int hva_querybuf(struct hva_plugin *hva, int fd, unsigned long int cmd,
+	struct v4l2_buffer *buffer)
+{
+	int ret;
+
+	V4L2_LOG("> %s: query buffer index %d on %s (%u) data stream\n", __func__,
+		buffer->index, type_to_str(buffer->type), buffer->type);
+
+	ret = SYS_IOCTL(fd, cmd, buffer);
+	if (ret) {
+		V4L2_LOG_ERR("%s: failed to query buffer on %s data stream\n",
+			__func__, type_to_str(buffer->type));
+		return ret;
+	}
+
+	V4L2_LOG("< %s\n", __func__);
+	return ret;
+}
+
+
+static int hva_qbuf(struct hva_plugin *hva, int fd, unsigned long int cmd,
+	struct v4l2_buffer *buffer)
+{
+	int ret;
+
+	V4L2_LOG("> %s: queue buffer index %d on %s (%u) data stream\n", __func__,
+		buffer->index, type_to_str(buffer->type), buffer->type);
+
+	ret = SYS_IOCTL(fd, cmd, buffer);
+	if (ret) {
+		V4L2_LOG_ERR("%s: failed to queue buffer on %s data stream\n",
+			__func__, type_to_str(buffer->type));
+		return ret;
+	}
+
+
+	V4L2_LOG("< %s\n", __func__);
+	return ret;
+}
+
+static int hva_streamon(struct hva_plugin *hva, int fd, unsigned long int cmd,
+	enum v4l2_buf_type *type)
+{
+	int ret;
+	V4L2_LOG("> %s: streamon on %s (%u) data stream\n", __func__,
+		type_to_str(*type), *type);
+
+	ret = SYS_IOCTL(fd, cmd, type);
+	if (ret) {
+		V4L2_LOG_ERR("%s: failed to streamon on %s data stream\n",
+			__func__, type_to_str(*type));
+		return ret;
+	}
+
+	V4L2_LOG("< %s\n", __func__);
+	return ret;
+}
+
+static int hva_streamoff(struct hva_plugin *hva, int fd, unsigned long int cmd,
+	enum v4l2_buf_type *type)
+{
+	int ret;
+	V4L2_LOG("> %s: streamoff on %s (%u) data stream\n", __func__,
+		type_to_str(*type), *type);
+
+	ret = SYS_IOCTL(fd, cmd, type);
+	if (ret) {
+		V4L2_LOG_ERR("%s: failed to streamoff on %s data stream\n",
+			__func__, type_to_str(*type));
+		return ret;
+	}
+
+	V4L2_LOG("< %s\n", __func__);
+	return ret;
+}
+
+static void *hva_plugin_init(int fd)
+{
+	struct hva_plugin *hva = NULL;
+	struct v4l2_capability cap;
+	int ret;
+
+	V4L2_LOG("> %s\n", __func__);
+
+	/* check if device needs hva plugin */
+	memset(&cap, 0, sizeof(cap));
+	ret = SYS_IOCTL (fd, VIDIOC_QUERYCAP, &cap);
+	if (ret) {
+		V4L2_LOG_ERR("%s: failed to query video capabilities\n",
+			__func__);
+		return NULL;
+	}
+
+	/* device doesn't need it. return NULL to disable the plugin */
+	if (strstr((const char *)cap.driver, (const char *)HVA_NAME) == NULL) {
+		V4L2_LOG("%s: the %s device doesn't need the HVA libv4l"
+			" plugin\n", __func__, cap.driver);
+		return NULL;
+	}
+
+	V4L2_LOG("%s: the %s device needs the HVA libv4l plugin\n", __func__,
+		cap.driver);
+
+	/* allocate and initialize private data */
+	hva = calloc(1, sizeof(struct hva_plugin));
+	if (!hva) {
+		V4L2_LOG_ERR("%s: couldn't allocate memory for the HVA libv4l"
+			" plugin\n", __func__);
+		return NULL;
+	}
+
+	V4L2_LOG("< %s: hva %p\n", __func__, hva);
+	return hva;
+}
+
+static void hva_plugin_close(void *dev_ops_priv)
+{
+	struct hva_plugin *hva = dev_ops_priv;
+	int i;
+
+	V4L2_LOG("> %s: close the HVA libv4l plugin\n", __func__);
+
+	if (hva)
+		free(hva);
+
+	V4L2_LOG("< %s\n", __func__);
+	return;
+}
+
+static int hva_plugin_ioctl(void *dev_ops_priv, int fd,
+			unsigned long int cmd, void *arg)
+{
+	struct hva_plugin *hva = dev_ops_priv;
+
+	switch (cmd) {
+	case VIDIOC_QUERYBUF:
+		return hva_querybuf(hva, fd, cmd, arg);
+	case VIDIOC_QBUF:
+		return hva_qbuf(hva, fd, cmd, arg);
+	case VIDIOC_STREAMON:
+		return hva_streamon(hva, fd, cmd, arg);
+	case VIDIOC_STREAMOFF:
+		return hva_streamoff(hva, fd, cmd, arg);
+	default:
+		return SYS_IOCTL(fd, cmd, arg);
+	}
+}
+
+PLUGIN_PUBLIC const struct libv4l_dev_ops libv4l2_plugin = {
+	.init = &hva_plugin_init,
+	.close = &hva_plugin_close,
+	.ioctl = &hva_plugin_ioctl,
+};
diff --git a/lib/libv4l-hva/libv4l-hva.h b/lib/libv4l-hva/libv4l-hva.h
new file mode 100644
index 0000000..30dc0d2
--- /dev/null
+++ b/lib/libv4l-hva/libv4l-hva.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2014 STMicroelectronics SA
+ *
+ * License Terms:  GNU General Public License (GPL) version 2
+ *
+ * Author: <yannick.fertre@st.com> for STMicroelectronics.
+ */
+
+#ifndef LIBV4L_HVA_H
+#define LIBV4L_HVA_H
+
+#include <stdio.h>
+#include <linux/videodev2.h>
+
+#include "libv4l2.h"
+#include "../libv4l2/libv4l2-priv.h"
+
+/* The following definition must be aligned with the ones specified by the
+ * HVA driver */
+#define HVA_NAME	"hva"
+
+
+/**
+ * struct hva_plugin
+ */
+
+struct hva_plugin {
+};
+
+#endif /* LIBV4L_HVA_H */
-- 
2.7.4

