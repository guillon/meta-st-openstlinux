From 38de18cb5fe92cf61f86e79f901eff786331937a Mon Sep 17 00:00:00 2001
From: yannick Fertre <yannick.fertre@st.com>
Date: Tue, 20 Jan 2015 14:37:51 +0100
Subject: [PATCH 07/15] libv4l-hva: H264 vaapi encoder supported

Update of configuration to includes Gstreamer libraries to use correctly
 the Glib symbols implemented by the h264 vaapi encoder.
Update Makefile to compile vaapi encoder.
Modify H264 vaapi encoder to reduce inclusion.

Change-Id: I181765432231c7e4effac759fd462a24aa1320cb
Signed-off-by: yannick Fertre <yannick.fertre@st.com>
Reviewed-on: https://gerrit.st.com/20753
Reviewed-by: Karine BOCLAUD <karine.boclaud-ext@st.com>
---
 configure.ac                                    | 11 ++++
 lib/libv4l-hva/Makefile.am                      | 20 ++++++-
 lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.c | 32 +++++++++-
 lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.h | 80 +++++++++++++++++++++++++
 4 files changed, 138 insertions(+), 5 deletions(-)

diff --git a/configure.ac b/configure.ac
index b8721c3..81149cb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -247,6 +247,17 @@ AC_DEFINE_DIR([LIBV4LCONVERT_PRIV_DIR], [libv4lconvertprivdir], [libv4lconvert p
 AC_DEFINE_DIR([IR_KEYTABLE_SYSTEM_DIR], [keytablesystemdir], [ir-keytable preinstalled tables directory])
 AC_DEFINE_DIR([IR_KEYTABLE_USER_DIR], [keytableuserdir], [ir-keytable user defined tables directory])
 
+dnl ---------------------------------------------------------------------------
+dnl -- GStreamer                                                             --
+dnl ---------------------------------------------------------------------------
+
+PKG_CHECK_MODULES([GST], [gstreamer-1.0 >= 1.0])
+PKG_CHECK_MODULES([GST_BASE], [gstreamer-base-1.0 >= 1.0])
+
+dnl ---------------------------------------------------------------------------
+dnl -- Gstreamer end                                                         --
+dnl ---------------------------------------------------------------------------
+
 # options
 
 AC_ARG_ENABLE(libdvbv5,
diff --git a/lib/libv4l-hva/Makefile.am b/lib/libv4l-hva/Makefile.am
index cfa2243..762583e 100644
--- a/lib/libv4l-hva/Makefile.am
+++ b/lib/libv4l-hva/Makefile.am
@@ -4,10 +4,26 @@ endif
 
 libv4l_hva_la_SOURCES = libv4l-hva.c
 
-libv4l_hva_la_CPPFLAGS = $(CFLAG_VISIBILITY)
+##### gst library #####
+libv4l_hva_la_SOURCES += \
+	gst/base/gstbitwriter.c \
+	gst/vaapi/gstvaapiutils_h264.c \
+	gst/vaapi/gstvaapiencoder_h264.c
+
+libv4l_hva_la_CPPFLAGS = $(CFLAG_VISIBILITY) \
+	-I$(srcdir)/va \
+	-DHVA_DEBUG
 
 libv4l_hva_la_LIBADD = ../libv4l2/libv4l2.la
 
-libv4l_hva_la_CPPFLAGS += -DHVA_DEBUG
+libv4l_hva_la_CFLAGS = $(GST_CFLAGS) -DGST_USE_UNSTABLE_API -DIN_LIBGSTVAAPI
 
 libv4l_hva_la_LDFLAGS = -avoid-version -module -shared -export-dynamic -lpthread
+
+libv4l_hva_la_LDFLAGS += $(GST_LIB_LDFLAGS)
+
+libv4l_hva_la_LIBADD = ../libv4l2/libv4l2.la \
+	$(GLIB_LIBS) \
+	$(GST_BASE_LIBS) \
+	$(GST_LIBS) \
+	$(NULL)
diff --git a/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.c b/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.c
index 3277f00..1878416 100644
--- a/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.c
+++ b/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.c
@@ -34,7 +34,8 @@
 #include "gstvaapicodedbufferproxy_priv.h"
 #include "gstvaapisurface.h"
 
-#define DEBUG 1
+/* don't activate vaapi debug to avoid undefinded symbol */
+/* #define DEBUG 1 */
 #include "gstvaapidebug.h"
 
 /* Define the maximum number of views supported */
@@ -93,6 +94,9 @@ typedef enum
   GST_VAAPI_ENC_H264_REORD_WAIT_FRAMES = 2
 } GstVaapiEncH264ReorderState;
 
+/* move _GstVaapiH264ViewRefPool & _GstVaapiH264ViewReorderPool to
+ * gstvaapiencoder_h264.h file */
+#if 0
 typedef struct _GstVaapiH264ViewRefPool
 {
   GQueue ref_list;
@@ -109,6 +113,7 @@ typedef struct _GstVaapiH264ViewReorderPool
   guint cur_frame_num;
   guint cur_present_index;
 } GstVaapiH264ViewReorderPool;
+#endif
 
 static inline gboolean
 _poc_greater_than (guint poc1, guint poc2, guint max_poc)
@@ -435,8 +440,9 @@ bs_write_sps_data (GstBitWriter * bs,
     WRITE_UINT32 (bs, mb_adaptive_frame_field, 1);
   }
 
-  /* direct_8x8_inference_flag */
-  WRITE_UINT32 (bs, 0, 1);
+  /* direct_8x8_inference_flag, need to be activate (solve issue on decode)*/
+  WRITE_UINT32 (bs, 1, 1);
+
   /* frame_cropping_flag */
   WRITE_UINT32 (bs, seq_param->frame_cropping_flag, 1);
 
@@ -718,6 +724,8 @@ bs_error:
 #define GST_VAAPI_ENCODER_H264_CAST(encoder) \
     ((GstVaapiEncoderH264 *)(encoder))
 
+/* move _GstVaapiEncoderH264 to gstvaapiencoder_h264.h file */
+#if 0
 struct _GstVaapiEncoderH264
 {
   GstVaapiEncoder parent_instance;
@@ -764,6 +772,7 @@ struct _GstVaapiEncoderH264
   GstVaapiH264ViewRefPool ref_pools[MAX_NUM_VIEWS];
   GstVaapiH264ViewReorderPool reorder_pools[MAX_NUM_VIEWS];
 };
+#endif
 
 /* Write a Slice NAL unit */
 static gboolean
@@ -1229,7 +1238,11 @@ fill_hrd_params (GstVaapiEncoderH264 * encoder, VAEncMiscParameterHRD * hrd)
 
 /* Adds the supplied sequence header (SPS) to the list of packed
    headers to pass down as-is to the encoder */
+/* add_packed_sequence_header will be called by libv4l-hva plugin */
+#if 0
 static gboolean
+#endif
+gboolean
 add_packed_sequence_header (GstVaapiEncoderH264 * encoder,
     GstVaapiEncPicture * picture, GstVaapiEncSequence * sequence)
 {
@@ -1262,6 +1275,8 @@ add_packed_sequence_header (GstVaapiEncoderH264 * encoder,
   data_bit_size = GST_BIT_WRITER_BIT_SIZE (&bs);
   data = GST_BIT_WRITER_DATA (&bs);
 
+/* deactivate this part of code to reduce included files */
+#if 0
   packed_seq_param.type = VAEncPackedHeaderSequence;
   packed_seq_param.bit_length = data_bit_size;
   packed_seq_param.has_emulation_bytes = 0;
@@ -1273,6 +1288,7 @@ add_packed_sequence_header (GstVaapiEncoderH264 * encoder,
 
   gst_vaapi_enc_picture_add_packed_header (picture, packed_seq);
   gst_vaapi_codec_object_replace (&packed_seq, NULL);
+#endif
 
   /* store sps data */
   _check_sps_pps_status (encoder, data + 4, data_bit_size / 8 - 4);
@@ -1342,7 +1358,11 @@ bs_error:
 
 /* Adds the supplied picture header (PPS) to the list of packed
    headers to pass down as-is to the encoder */
+/* add_packed_picture_header will be called by libv4l-hva plugin */
+#if 0
 static gboolean
+#endif
+gboolean
 add_packed_picture_header (GstVaapiEncoderH264 * encoder,
     GstVaapiEncPicture * picture)
 {
@@ -1361,6 +1381,8 @@ add_packed_picture_header (GstVaapiEncoderH264 * encoder,
   data_bit_size = GST_BIT_WRITER_BIT_SIZE (&bs);
   data = GST_BIT_WRITER_DATA (&bs);
 
+/* deactivate this part of code to reduce included files */
+#if 0
   packed_pic_param.type = VAEncPackedHeaderPicture;
   packed_pic_param.bit_length = data_bit_size;
   packed_pic_param.has_emulation_bytes = 0;
@@ -1372,6 +1394,7 @@ add_packed_picture_header (GstVaapiEncoderH264 * encoder,
 
   gst_vaapi_enc_picture_add_packed_header (picture, packed_pic);
   gst_vaapi_codec_object_replace (&packed_pic, NULL);
+#endif
 
   /* store pps data */
   _check_sps_pps_status (encoder, data + 4, data_bit_size / 8 - 4);
@@ -2290,6 +2313,8 @@ gst_vaapi_encoder_h264_flush (GstVaapiEncoder * base_encoder)
   return GST_VAAPI_ENCODER_STATUS_SUCCESS;
 }
 
+/* deactivate this part of code to reduce included files */
+#if 0
 /* Generate "codec-data" buffer */
 static GstVaapiEncoderStatus
 gst_vaapi_encoder_h264_get_codec_data (GstVaapiEncoder * base_encoder,
@@ -2886,3 +2911,4 @@ gst_vaapi_encoder_h264_get_profile_and_level (GstVaapiEncoderH264 * encoder,
     *out_level_ptr = encoder->level;
   return TRUE;
 }
+#endif
diff --git a/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.h b/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.h
index 77d7f0a..e10d764 100644
--- a/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.h
+++ b/lib/libv4l-hva/gst/vaapi/gstvaapiencoder_h264.h
@@ -24,11 +24,82 @@
 #ifndef GST_VAAPI_ENCODER_H264_H
 #define GST_VAAPI_ENCODER_H264_H
 
+#include <va/va_enc_h264.h>
 #include <gst/vaapi/gstvaapiencoder.h>
+#include <gst/vaapi/gstvaapiencoder_priv.h>
 #include <gst/vaapi/gstvaapiutils_h264.h>
 
 G_BEGIN_DECLS
 
+/* move _GstVaapiH264ViewRefPool, _GstVaapiH264ViewReorderPool & _GstVaapiEncoderH264
+ * structures from gstvaapiencoder_h264.h */
+/* Define the maximum number of views supported */
+#define MAX_NUM_VIEWS 2
+
+typedef struct _GstVaapiH264ViewRefPool
+{
+  GQueue ref_list;
+  guint max_ref_frames;
+  guint max_reflist0_count;
+  guint max_reflist1_count;
+} GstVaapiH264ViewRefPool;
+
+typedef struct _GstVaapiH264ViewReorderPool
+{
+  GQueue reorder_frame_list;
+  guint reorder_state;
+  guint frame_index;
+  guint cur_frame_num;
+  guint cur_present_index;
+} GstVaapiH264ViewReorderPool;
+
+struct _GstVaapiEncoderH264
+{
+  GstVaapiEncoder parent_instance;
+
+  GstVaapiProfile profile;
+  GstVaapiLevelH264 level;
+  guint8 profile_idc;
+  guint8 max_profile_idc;
+  guint8 hw_max_profile_idc;
+  guint8 level_idc;
+  guint32 idr_period;
+  guint32 init_qp;
+  guint32 min_qp;
+  guint32 num_slices;
+  guint32 num_bframes;
+  guint32 mb_width;
+  guint32 mb_height;
+  gboolean use_cabac;
+  gboolean use_dct8x8;
+  GstClockTime cts_offset;
+  gboolean config_changed;
+
+  /* frame, poc */
+  guint32 max_frame_num;
+  guint32 log2_max_frame_num;
+  guint32 max_pic_order_cnt;
+  guint32 log2_max_pic_order_cnt;
+  guint32 idr_num;
+  guint8 pic_order_cnt_type;
+  guint8 delta_pic_order_always_zero_flag;
+
+  GstBuffer *sps_data;
+  GstBuffer *subset_sps_data;
+  GstBuffer *pps_data;
+
+  guint bitrate_bits;           // bitrate (bits)
+  guint cpb_length;             // length of CPB buffer (ms)
+  guint cpb_length_bits;        // length of CPB buffer (bits)
+
+  /* MVC */
+  gboolean is_mvc;
+  guint32 view_idx;
+  guint32 num_views;
+  GstVaapiH264ViewRefPool ref_pools[MAX_NUM_VIEWS];
+  GstVaapiH264ViewReorderPool reorder_pools[MAX_NUM_VIEWS];
+};
+
 #define GST_VAAPI_ENCODER_H264(encoder) \
   ((GstVaapiEncoderH264 *) (encoder))
 
@@ -75,6 +146,15 @@ gboolean
 gst_vaapi_encoder_h264_get_profile_and_level (GstVaapiEncoderH264 * encoder,
     GstVaapiProfile * out_profile_ptr, GstVaapiLevelH264 * out_level_ptr);
 
+/* these functions will be called by libv4l-hva plugin */
+gboolean
+add_packed_sequence_header (GstVaapiEncoderH264 * encoder,
+    GstVaapiEncPicture * picture, GstVaapiEncSequence * sequence);
+
+gboolean
+add_packed_picture_header (GstVaapiEncoderH264 * encoder,
+    GstVaapiEncPicture * picture);
+
 G_END_DECLS
 
 #endif /*GST_VAAPI_ENCODER_H264_H */
-- 
2.7.4

