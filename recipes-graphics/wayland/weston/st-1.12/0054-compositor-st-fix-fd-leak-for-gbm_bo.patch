From 291cd9780c28526ee0abcabdb88ff65716f53a32 Mon Sep 17 00:00:00 2001
From: Vincent Abriou <vincent.abriou@st.com>
Date: Mon, 19 Sep 2016 16:08:39 +0200
Subject: [PATCH 54/61] compositor-st: fix fd leak for gbm_bo

Since we call gbm_bo_import, we have to call gbm_bo_destroy if we decide
to not assign the related view in a sprite.

Change-Id: I346602cd820ed68b0e37f9391ca181acac9fc0ea
Signed-off-by: Fabien Dessenne <fabien.dessenne@st.com>
Reviewed-on: https://gerrit.st.com/58019
Reviewed-by: Vincent ABRIOU <vincent.abriou@st.com>
Tested-by: Vincent ABRIOU <vincent.abriou@st.com>
---
 libweston/compositor-st.c | 39 ++++++++++++++++++++++-----------------
 1 file changed, 22 insertions(+), 17 deletions(-)

diff --git a/libweston/compositor-st.c b/libweston/compositor-st.c
index f56c9a4..8779c3f 100644
--- a/libweston/compositor-st.c
+++ b/libweston/compositor-st.c
@@ -1094,16 +1094,16 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 	weston_xlog("   %s: output_base->id = %d\n", __func__, output->base.id);
 
 	if ((b->gbm == NULL) && !b->use_pixman)
-		return NULL;
+		goto no_overlay;
 
 	if (ev->surface->buffer_ref.buffer == NULL)
-		return NULL;
+		goto no_overlay;
 
 	buffer_resource = ev->surface->buffer_ref.buffer->resource;
 
 	if (wl_shm_buffer_get(buffer_resource)) {
 		weston_xlog("    shm buffer => could not be assigned to a plane\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if ((dmabuf = linux_dmabuf_buffer_get(buffer_resource))) {
@@ -1114,44 +1114,44 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 				ev->surface, ev->surface->buffer_ref.buffer);
 	} else {
 		weston_xlog("    not a dmabuf nor gbm_bo => could not be assigned to a plane\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (viewport->buffer.transform != output->base.transform) {
 		weston_xlog("    transform\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (viewport->buffer.scale != output->base.current_scale) {
 		weston_xlog("    scale\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (b->sprites_are_broken) {
 		weston_xlog("    sprites are broken\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (ev->output_mask != (1u << output->base.id)) {
 		weston_xlog("    surface is out of the refresh area\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (ev->alpha < 0.99f) {
 		weston_xlog("    overlay check: alpha not ~1.0: %f\n", ev->alpha);
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (!drm_view_transform_supported(ev)) {
-		return NULL;
 		weston_xlog("    overlay check: transform not supported\n");
+		goto no_overlay;
 	}
 
 	if (dmabuf) {
 		format = dmabuf->attributes.format;
 		if (format == 0) {
 			weston_xlog("    overlay check: dmabuf format not supported\n");
-			return NULL;
+			goto no_overlay;
 		}
 	}
 
@@ -1177,7 +1177,7 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 
 		if (s->vblank_pending && format_ok) {
 			weston_xlog("    sprite is currently being rendered\n");
-			return NULL;
+			goto no_overlay;
 		}
 
 		if ((!s->next) && format_ok) {
@@ -1187,22 +1187,21 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 	}
 
 	if (bo && format == 0) {
-		gbm_bo_destroy(bo);
 		weston_xlog("    overlay check: bo format not supported\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	/* No sprites available */
 	if (!found) {
 		weston_xlog("    no sprite available\n");
-		return NULL;
+		goto no_overlay;
 	}
 
 	if (dmabuf) {
 		s->next = drm_fb_get_from_dmabuf(dmabuf, b, format);
 		if (!s->next) {
 			weston_xlog("    overlay check: to FB failed\n");
-			return NULL;
+			goto no_overlay;
 		}
 		weston_xlog("    got dmabuf handle %d (s->plane_id= 0x%x)\n",
 				s->next->handle, s->plane_id);
@@ -1211,7 +1210,7 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 		if (!s->next) {
 			gbm_bo_destroy(bo);
 			weston_xlog("    overlay check: to FB failed\n");
-			return NULL;
+			goto no_overlay;
 		}
 	}
 
@@ -1298,6 +1297,12 @@ drm_output_prepare_overlay_view(struct drm_output *output,
 	pixman_region32_fini(&src_rect);
 
 	return &s->plane;
+
+no_overlay:
+	if (bo)
+		gbm_bo_destroy(bo);
+
+	return NULL;
 }
 
 static struct weston_plane *
-- 
2.7.4

